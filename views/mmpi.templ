package views

import "github.com/Francesco99975/shorehamex/internal/models"
import "strconv"
import "strings"

templ MMPI(site models.Site, admin bool, questions []string, page int, path string) {
    @CoreHTML(site) {
        @Header(admin)
        <main class="flex w-full md:w-2/3 flex-col items-start justify-between p-2 mt-5 md:self-center">
            <h1 class="text-3xl text-blue-900 mb-5">
                MMPI-2
            </h1>

            
            <form id="fq" class="w-full flex flex-col items-start justify-center" class="w-full" hx-post={ path }>

                
                if admin && page == 1 {
                    @StringInput("patient", "text", "Patient Name")
                }

                if page == 1 {
                    @SexRadioField("sex", "What is your Sex")
                }

                @MMPIFormPartial(questions, page, "")
                
            </form>

      </main>
    }
}


templ MMPIFormPartial(questions []string, page int, patient string) {
    <input type="hidden" id="duration" name="duration" value="0"/>

    <input type="hidden" id="page" name="page" value={strconv.Itoa(page)} />
    if page > 1 {
        <input type="hidden" id="patient" name="patient" value={patient} />
    }
    for index, question := range questions {
        @BoolRadioField(strconv.Itoa(page)+"A"+strconv.Itoa(index), question)
    }

    <button
        type="submit"
        class="w-full mt-5 bg-green-900 text-white text-lg text-center font-bold p-2 rounded-sm"
    >
        if page == 23 {
            Submit
        } else { 
             Continue to page { strconv.Itoa(page + 1) } / 23 
        }
    </button>

     <script>   
            // Capture the start time when the page loads
            var startTime = new Date().getTime();
            console.log("hello")

            // Add a submit event listener to the form
            for (const el of document.querySelectorAll('input[type="radio"]')) {
                el.addEventListener("change", function() {
                    // Calculate the time spent on the page
                    var endTime = new Date().getTime();
                    var timeSpent = endTime - startTime;

                    // Update duration on hidden element
                    var timeInput = document.getElementById("duration")
                    timeInput.value = timeSpent;
                });
            }   
      </script>
}


templ MMPIFinal(results models.MMPIResults) {
 
     
            <section class="flex flex-col w-3/4 rounded-lg p-3 my-2 justify-center items-center text-center text-green-600">
            <h1 class="text-2xl p-2 my-3  text-center">MMPI Results for { results.Patient }</h1>
            <h2 class="text-lg my-1 p-1">Sex: { results.Sex }</h2>
                for _, category := range results.Categories {
                    <div class="mb-7">
                        <h2 class="text-lg">{ category.Title }</h2>

                        <p class="m-0 mt-2">
                            <strong>Derived Indications: </strong>
                            { strings.Join(category.DerivedIndications, ",") }
                        </p>


                        <table class="border-collapse w-full mt-3">
                            <thead>
                                <tr>
                                    <th class="border-1 border-solid border-gray-300 bg-slate-200 p-2 text-left"
                                    
                                    >
                                        Scale Name
                                    </th>
                                    <th
                                        class="border-1 border-solid border-gray-300 bg-slate-200 p-2 text-left"
                                    >
                                        Scale Description
                                    </th>
                                    <th
                                        class="border-1 border-solid border-gray-300 bg-slate-200 p-2 text-left"
                                    >
                                        Scale Purpose
                                    </th>
                                    <th
                                        class="border-1 border-solid border-gray-300 bg-slate-200 p-2 text-left"
                                    >
                                    Score
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                for _, scale := range category.Scales {
                                    <tr key={scale.ScaleName}>
                                        <td
                                           class="border-1 border-solid border-gray-300 p-2 text-left"
                                        >
                                            {scale.ScaleName}
                                        </td>
                                        <td
                                          class="border-1 border-solid border-gray-300 p-2 text-left"
                                        >
                                            {scale.ScaleDescription}
                                        </td>
                                        <td
                                           class="border-1 border-solid border-gray-300 p-2 text-left"
                                        >
                                            {scale.ScalePupose}
                                        </td>
                                        <td
                                           class="border-1 border-solid border-gray-300 p-2 text-left"
                                        >
                                            {strconv.Itoa(int(scale.Score))}
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </section>  
            
    
}